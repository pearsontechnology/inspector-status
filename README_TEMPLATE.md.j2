## {{ REPO_NAME }}

{{ BUILD_STATUS }}

{{ README_APP_CONTENT }}

### Notes

- Use the `make` commands mentioned in the section below to build and interact with the container.

- Do not edit the `Makefile`. It is templated and should work out of the box.

- Add any additional env vars, volumes logic etc for your container to the `docker-compose.yml` file if necessary.

- Use the `docker-compose-test.yml` to create a temporary, clean version of the container, built from the same Dockerfile. Tests will be executed against this container. This container will only exist for the duration of the test execution.

- Add inspec test files into `test/inspec`.

- If your repo does not require automated tests, you should remove the `test` folder from the root directory. But this is discouraged. Ideally every repo should have tests.

- Update pearsontechnology/image-template/travis/repos.txt with your repo name 'image-your-repo', and this will ensure you continue to get tooling updates.

- This README.md file is templated. Do NOT make changes to this file directly as your changes will be overwritten!!! See the section <strong>[Updating the README.md](#updating-the-readmemd)</strong> below for more info how to update the README.md file.

### Building and Testing

You'll need the following dependencies:
 
- Make
- [Docker](https://store.docker.com/editions/community/docker-ce-desktop-mac)
- [jq](https://github.com/stedolan/jq/wiki/Installation)
- [awscli](http://docs.aws.amazon.com/cli/latest/userguide/installing.html)
{{ README_APP_DEPENDENCIES }}

### docker-compose.yaml and docker-compose-test.yaml

Before building your application container you will need to create 2 files in the root directory of the project:

- docker-compose.yaml
- docker-compose-test.yaml

You can use the docker-compose.example.yaml and docker-compose-test.example.yaml for examples of the expected content of each file.

### Make commands

If you're in a hurry you can run all of the below with a single command.

`make`

Otherwise it may be best to run the individual commands below to get a feel for the workflow.

You can now work on your application container by changing the `Dockerfile` and `docker-compose.yaml` files and running:

`make pre_build`

Depending on the type of project you are making, there may be a need to run some extra logic before we begin to build the docker image.
For example you may need to clone an external git repo to download its remote files on to the local file system before they are included in the docker image via the COPY instruction of the Dockerfile.
This command allows you to achieve this by executing the script `pre_build.sh`.
This script can be found in the root directory. You can place the pre-build, IDEMPOTENT logic you need in this file.
Please remember to update your `.gitignore` file to exclude any downloaded files being checked into your project repo.
If you do not need any pre-build actions you can keep the `pre_build.sh` blank or just delete it.


`make config`

A typical workflow will usually involve running his over and over again while making incremental changes.


Or work on tests by running:

`make test`

Again, this can be done iteratively. You can add or change a test and run this over and over again until it passes. The testing container is automatically destroyed after test execution.

`make v_scan`

Use this command to run a vulnerability scan against the image that would be built from the Dockerfile. A report will be presented in the stdout of the command and also stored in the Twistlock console for more detailed analysis. See nicholas.vinson@pearson.com for console access.

`make clean`

To destroy the container created by make config run `make clean`.

Use `make status` to check if the container is up and running.

If you want to have a poke around inside the container to debug you can use `make ssh`. Then ctrl+d to exit.

`make readme`

See the [Updating the README.md](#updating-the-readmemd) section below.

### Travis Integration

Before making your first PR you will need to make sure you have generated keys for Travis. You can do this by running the following command: `cd travis && ./travis_rw_key.sh`. Please commit the file changes made by this command.
You will need to have the travis cli on your local machine. Installation instructions can be found at https://github.com/travis-ci/travis.rb#installation.
For more information about Travis access, please contact steven.acreman@pearson.com.

### Get Bitesize Repo

Once the initial version of your project has been signed off by the team please add it into the https://github.com/pearsontechnology/get-bitesize repo if applicable.

### Pushing images to docker registry's

After a successful PR is merged your code will be tagged in git. This tag can then be used to push a new docker image to a docker registry.
To push to the public registry [Docker Hub](https://hub.docker.com/u/pearsontechnology/) a file called `docker-public-repo-enabled` must be present in the root directory.
This will then execute the logic found in the file `travis/after_success/docker-image-push-public.sh`.

If you would like to push to a private docker registry you must add your logic to the file `travis/after_success/docker-image-push-private.sh`.
You must then create an empty file in the root directory called `docker-private-repo-enabled` and delete the file `docker-public-repo-enabled`.

### Updating the README.md

The README.md file for this repo is generated from a template called <strong>README_TEMPLATE.md.j2</strong>. This template also includes contents from the following files:
- <strong>README_APP.md</strong>
- <strong>README_APP_DEPENDENCIES.md</strong>

README_APP.md can be used to add any application specific descriptions for your repo like its purpose, environment vars etc.

README_APP_DEPENDENCIES.md can be used to list any additional software dependencies etc your repo may have. Items listed here will appear under the <strong>Building and Testing</strong> section of the README_TEMPLATE.md.j2 file.

All image-template information which applies to all of the image-* repos can be updated directly in the README_TEMPLATE.j2 file
Once you have added all your desired content to the relevant files you can then run `make readme` to generate an updated README.md file.
